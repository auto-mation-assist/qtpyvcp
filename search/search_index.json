{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QtPyVCP: PyQt5 based Virtual Control Panel toolkit for LinuxCNC QtPyVCP is a PyQt5-based framework for building Virtual Control Panels (VCPs) for the LinuxCNC machine controller. The goal is to provide a no-code, drag-and-drop system for making simple VCPs, as well as an easy to use and expand python framework for building complex VCPs. QtPyVCP is designed with the philosophy that it is impossible to predict and satisfy everyones needs, but it is possible to make it easy(er) for people to satisfy their own needs. Hence QtPyVCP's goal is to pride a rich set of utilities and basic widgets that can easily be built on, extended and combined, with minimal (if any) python code to create a fully custom VCP. Screenshot Prerequisites LinuxCNC ~2.8pre (master) Python 2.7 Qt 5 PyQt 5 DISCLAIMER THE AUTHORS OF THIS SOFTWARE ACCEPT ABSOLUTELY NO LIABILITY FOR ANY HARM OR LOSS RESULTING FROM ITS USE. IT IS EXTREMELY UNWISE TO RELY ON SOFTWARE ALONE FOR SAFETY. Any machinery capable of harming persons must have provisions for completely removing power from all motors, etc, before persons enter any danger area. All machinery must be designed to comply with local and national safety codes, and the authors of this software can not, and do not, take any responsibility for such compliance. This software is released under the GPLv2.","title":"Home"},{"location":"#qtpyvcp-pyqt5-based-virtual-control-panel-toolkit-for-linuxcnc","text":"QtPyVCP is a PyQt5-based framework for building Virtual Control Panels (VCPs) for the LinuxCNC machine controller. The goal is to provide a no-code, drag-and-drop system for making simple VCPs, as well as an easy to use and expand python framework for building complex VCPs. QtPyVCP is designed with the philosophy that it is impossible to predict and satisfy everyones needs, but it is possible to make it easy(er) for people to satisfy their own needs. Hence QtPyVCP's goal is to pride a rich set of utilities and basic widgets that can easily be built on, extended and combined, with minimal (if any) python code to create a fully custom VCP.","title":"QtPyVCP: PyQt5 based Virtual Control Panel toolkit for LinuxCNC"},{"location":"#screenshot","text":"","title":"Screenshot"},{"location":"#prerequisites","text":"LinuxCNC ~2.8pre (master) Python 2.7 Qt 5 PyQt 5","title":"Prerequisites"},{"location":"#disclaimer","text":"THE AUTHORS OF THIS SOFTWARE ACCEPT ABSOLUTELY NO LIABILITY FOR ANY HARM OR LOSS RESULTING FROM ITS USE. IT IS EXTREMELY UNWISE TO RELY ON SOFTWARE ALONE FOR SAFETY. Any machinery capable of harming persons must have provisions for completely removing power from all motors, etc, before persons enter any danger area. All machinery must be designed to comply with local and national safety codes, and the authors of this software can not, and do not, take any responsibility for such compliance. This software is released under the GPLv2.","title":"DISCLAIMER"},{"location":"basic_usage/","text":"Basic Usage At this point you should have the dependencies satisfied and QtPyVCP installed. Launching a sim config Several sim configurations are included with QtPyVCP, they are located in the project's sim/ directory. These are intended to be run from a terminal with the working directory as the project root. Available sim configs sim \u251c\u2500\u2500 tool.tbl \u251c\u2500\u2500 xyzb.ini \u251c\u2500\u2500 xyzcw.ini \u251c\u2500\u2500 xyz.ini \u251c\u2500\u2500 xyz-metric.ini \u2514\u2500\u2500 xyzy-gantry.ini To launch the basic XYZ machine sim run: linuxcnc sim/xyz.ini This should start LinuxCNC and show the VCP chooser with a list of available VCPs. Note: If there are no VCPs listed, most likely you did not run setup.py per the instillation instructions. To skip the VCP chooser and launch a VCP directly you can specify the name of the desired VCP on the command line. For example to launch the Mini VCP: linuxcnc sim/xyz.ini mini INI Configuration QtPyVCP does not require any special INI settings. To set qtpyvcp as the GUI simply edit the INIs DISPLAY entry. [DISPLAY] DISPLAY = qtpyvcp ... This will show the VCP chooser every time you start LinuxCNC, but as we saw above it is possible to specify a specific VCP on the command line. We can do the same thing in the INI: [DISPLAY] DISPLAY = qtpyvcp mini ... But QtPyVCP supports a bunch of command line options, so this can get messy. However we can take advantage of the fact that when QtPyVCP starts up it scans the INI's [DISPLAY] section for any items that match the names of the command line options, and merges them with any options specified on the command line. So a better INI config would look like this: [DISPLAY] DISPLAY = qtpyvcp VCP = mini ... In general the command line options take precedence, meaning they will override options set in the INI. The exception to this are any flags, such as the --fullscreen option, which if specified in the INI can not be overridden on the command line.","title":"Basic Usage"},{"location":"basic_usage/#basic-usage","text":"At this point you should have the dependencies satisfied and QtPyVCP installed.","title":"Basic Usage"},{"location":"basic_usage/#launching-a-sim-config","text":"Several sim configurations are included with QtPyVCP, they are located in the project's sim/ directory. These are intended to be run from a terminal with the working directory as the project root. Available sim configs sim \u251c\u2500\u2500 tool.tbl \u251c\u2500\u2500 xyzb.ini \u251c\u2500\u2500 xyzcw.ini \u251c\u2500\u2500 xyz.ini \u251c\u2500\u2500 xyz-metric.ini \u2514\u2500\u2500 xyzy-gantry.ini To launch the basic XYZ machine sim run: linuxcnc sim/xyz.ini This should start LinuxCNC and show the VCP chooser with a list of available VCPs. Note: If there are no VCPs listed, most likely you did not run setup.py per the instillation instructions. To skip the VCP chooser and launch a VCP directly you can specify the name of the desired VCP on the command line. For example to launch the Mini VCP: linuxcnc sim/xyz.ini mini","title":"Launching a sim config"},{"location":"basic_usage/#ini-configuration","text":"QtPyVCP does not require any special INI settings. To set qtpyvcp as the GUI simply edit the INIs DISPLAY entry. [DISPLAY] DISPLAY = qtpyvcp ... This will show the VCP chooser every time you start LinuxCNC, but as we saw above it is possible to specify a specific VCP on the command line. We can do the same thing in the INI: [DISPLAY] DISPLAY = qtpyvcp mini ... But QtPyVCP supports a bunch of command line options, so this can get messy. However we can take advantage of the fact that when QtPyVCP starts up it scans the INI's [DISPLAY] section for any items that match the names of the command line options, and merges them with any options specified on the command line. So a better INI config would look like this: [DISPLAY] DISPLAY = qtpyvcp VCP = mini ... In general the command line options take precedence, meaning they will override options set in the INI. The exception to this are any flags, such as the --fullscreen option, which if specified in the INI can not be overridden on the command line.","title":"INI Configuration"},{"location":"dependencies/","text":"Dependencies These are the dependencies needed to run QyPyVCP or a VCP built with it on Debian 9 (Stretch) systems. In addition you will need to have LinuxCNC ~2.8pre (master) installed, either system wide or as a Run In Place (RIP) built from source. For production use (non development) These dependencies are needed for running QtPyVCP, VCPs may have additional dependencies. Core dependencies: sudo apt-get install python-pyqt5 sudo apt-get install python-dbus.mainloop.pyqt5 sudo apt-get install python-pyqt5.qtopengl sudo apt-get install python-pyqt5.qsci sudo apt-get install python-docopt Required for Camera widget: sudo apt-get install python-pyqt5.qtmultimedia sudo apt-get install gstreamer1.0-plugins-bad sudo apt-get install libqt5multimedia5-plugins Required for FileSytem widget: sudo apt-get install python-pyudev sudo apt-get install python-psutil Development dependencies Required for QtPyVCP and VCP development: sudo apt-get install qttools5-dev-tools sudo apt-get install qttools5.dev sudo apt-get install pyqt5-dev-tools Required for building documentation: pip install mkdocs pip install mkdocs-material Run mkdocs build or mkdocs serve to preview docs. Note: We try to keep this up to date, but if additional dependencies are needed please notify one of the developers so it can be added.","title":"Dependencies"},{"location":"dependencies/#dependencies","text":"These are the dependencies needed to run QyPyVCP or a VCP built with it on Debian 9 (Stretch) systems. In addition you will need to have LinuxCNC ~2.8pre (master) installed, either system wide or as a Run In Place (RIP) built from source.","title":"Dependencies"},{"location":"dependencies/#for-production-use-non-development","text":"These dependencies are needed for running QtPyVCP, VCPs may have additional dependencies. Core dependencies: sudo apt-get install python-pyqt5 sudo apt-get install python-dbus.mainloop.pyqt5 sudo apt-get install python-pyqt5.qtopengl sudo apt-get install python-pyqt5.qsci sudo apt-get install python-docopt Required for Camera widget: sudo apt-get install python-pyqt5.qtmultimedia sudo apt-get install gstreamer1.0-plugins-bad sudo apt-get install libqt5multimedia5-plugins Required for FileSytem widget: sudo apt-get install python-pyudev sudo apt-get install python-psutil","title":"For production use (non development)"},{"location":"dependencies/#development-dependencies","text":"Required for QtPyVCP and VCP development: sudo apt-get install qttools5-dev-tools sudo apt-get install qttools5.dev sudo apt-get install pyqt5-dev-tools Required for building documentation: pip install mkdocs pip install mkdocs-material Run mkdocs build or mkdocs serve to preview docs. Note: We try to keep this up to date, but if additional dependencies are needed please notify one of the developers so it can be added.","title":"Development dependencies"},{"location":"installing/","text":"Installing Getting the source code The easiest way to get QtPyVCP is to clone the QtPyVCP repository with git. If you don't have git installed you can simply download the QtPyVCP .zip file using the green Clone or download button, but this will make it harder to update in the future. To clone the repository open a terminal at the desired location and say: git clone https://github.com/kcjengr/qtpyvcp qtpyvcp Enter the newly cloned directory: cd qtpyvcp Install using setup.py Note At this point only setup.py develop is supported. setup.py install and virtual environments may work but are untested. You need to have the python 2.7 setup tools installed, if you don't or are not sure run: sudo apt-get install python-setuptools Then install by running: python setup.py develop --user This will install QtPyVCP on your PYTHONPATH and will generate command line scripts for launching QtPyVCP, the example VCPs and the command line tools. If you used the --user flag the scripts will be placed in ~/.local/bin/ , which is not on the PATH on Debian 9 (Stretch). You can add ~/.local/bin/ to the current PATH by running: export PATH=$PATH:~/.local/bin/ Tip You will have to run the above commend for every terminal you wish to run QtPyVCP from, a more convenient solution is to append the following line to your bash ~/.profile : PATH=$PATH:~/.local/bin/ Testing the install Confirm that QtPyVCP installed correctly and is available by saying: qtpyvcp -h This will print a list of command line options it the installation was successful. QtDesigner Plug-ins (development only) In order for the QtDesigner plugins to load, you must have the correct version of libpyqt5.so in /usr/lib/x86_64-linux-gnu/qt5/plugins/designer/ . This library must be compiled for the specific architecture, Qt version and Python version you are using. One way to get this file is to build PyQt5 from source, following the procedure here: https://gist.github.com/KurtJacobson/34a2e45ea2227ba58702fc1cb0372c40 If you can find a pre-compiled version, then you should be able simply place it in /usr/lib/x86_64-linux-gnu/qt5/plugins/designer/ and be good to go. A compiled version of libpyqt5.so suitable for use on a 64bit Debian stretch system with Python2.7 and Qt 5.7.1 is included in the QtDesigner directory.","title":"Installing"},{"location":"installing/#installing","text":"","title":"Installing"},{"location":"installing/#getting-the-source-code","text":"The easiest way to get QtPyVCP is to clone the QtPyVCP repository with git. If you don't have git installed you can simply download the QtPyVCP .zip file using the green Clone or download button, but this will make it harder to update in the future. To clone the repository open a terminal at the desired location and say: git clone https://github.com/kcjengr/qtpyvcp qtpyvcp Enter the newly cloned directory: cd qtpyvcp","title":"Getting the source code"},{"location":"installing/#install-using-setuppy","text":"Note At this point only setup.py develop is supported. setup.py install and virtual environments may work but are untested. You need to have the python 2.7 setup tools installed, if you don't or are not sure run: sudo apt-get install python-setuptools Then install by running: python setup.py develop --user This will install QtPyVCP on your PYTHONPATH and will generate command line scripts for launching QtPyVCP, the example VCPs and the command line tools. If you used the --user flag the scripts will be placed in ~/.local/bin/ , which is not on the PATH on Debian 9 (Stretch). You can add ~/.local/bin/ to the current PATH by running: export PATH=$PATH:~/.local/bin/ Tip You will have to run the above commend for every terminal you wish to run QtPyVCP from, a more convenient solution is to append the following line to your bash ~/.profile : PATH=$PATH:~/.local/bin/","title":"Install using setup.py"},{"location":"installing/#testing-the-install","text":"Confirm that QtPyVCP installed correctly and is available by saying: qtpyvcp -h This will print a list of command line options it the installation was successful.","title":"Testing the install"},{"location":"installing/#qtdesigner-plug-ins-development-only","text":"In order for the QtDesigner plugins to load, you must have the correct version of libpyqt5.so in /usr/lib/x86_64-linux-gnu/qt5/plugins/designer/ . This library must be compiled for the specific architecture, Qt version and Python version you are using. One way to get this file is to build PyQt5 from source, following the procedure here: https://gist.github.com/KurtJacobson/34a2e45ea2227ba58702fc1cb0372c40 If you can find a pre-compiled version, then you should be able simply place it in /usr/lib/x86_64-linux-gnu/qt5/plugins/designer/ and be good to go. A compiled version of libpyqt5.so suitable for use on a 64bit Debian stretch system with Python2.7 and Qt 5.7.1 is included in the QtDesigner directory.","title":"QtDesigner Plug-ins (development only)"},{"location":"tools/qcompile/","text":"QCompile QCompile - compile .ui and .qrc files to Python Recursively compiles all Qt .ui and .qrc files in the specified package(s). Usage: qcompile package ... qcompile -h Example: $ qcompile . $ qcompile package1 package2/subpackage","title":"QCompile"},{"location":"tools/qcompile/#qcompile","text":"QCompile - compile .ui and .qrc files to Python Recursively compiles all Qt .ui and .qrc files in the specified package(s). Usage: qcompile package ... qcompile -h Example: $ qcompile . $ qcompile package1 package2/subpackage","title":"QCompile"},{"location":"widgets/buttons/mdi_button/","text":"MDI Button","title":"MDI Button"},{"location":"widgets/buttons/mdi_button/#mdi-button","text":"","title":"MDI Button"},{"location":"widgets/buttons/subcall_button/","text":"SubCall Button","title":"SubCall Button"},{"location":"widgets/buttons/subcall_button/#subcall-button","text":"","title":"SubCall Button"}]}